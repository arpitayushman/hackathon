from flask import Flask, request, jsonify, send_file
import subprocess
import os
import pandas as pd
import joblib
import zipfile
import tempfile
import re
from config import VALID_CATEGORIES, BASE_DIR

app = Flask(__name__)

# Load models
def load_models(category):
    models_dir = os.path.join(BASE_DIR, 'models')
    
    try:
        # Load appropriate models based on category
        if category == 'Loan':
            amount_model = joblib.load(os.path.join(models_dir, 'amount_model.joblib'))
            volume_model = joblib.load(os.path.join(models_dir, 'volume_model.joblib'))
        elif category == 'Utility':
            amount_model = joblib.load(os.path.join(models_dir, 'amount_model.joblib'))
            volume_model = joblib.load(os.path.join(models_dir, 'volume_model.joblib'))
        else:
            # For other categories, you might need specific models or a generic one
            amount_model = joblib.load(os.path.join(models_dir, 'amount_model.joblib'))
            volume_model = joblib.load(os.path.join(models_dir, 'volume_model.joblib'))
        
        return amount_model, volume_model
    except FileNotFoundError:
        raise ValueError(f"Model files for category '{category}' not found")

@app.route('/train', methods=['POST'])
def train_model():
    """API endpoint to trigger model training"""
    try:
        # Execute the training script
        result = subprocess.run(['python', 'main.py', '--train'], 
                               capture_output=True, text=True, check=True)
        
        return jsonify({
            'status': 'success',
            'message': 'Model training completed',
            'details': result.stdout
        })
    except subprocess.CalledProcessError as e:
        return jsonify({
            'status': 'error',
            'message': 'Model training failed',
            'details': e.stderr
        }), 500

@app.route('/predict', methods=['POST'])
def predict():
    """API endpoint to make predictions and return output files"""
    # Get parameters from request
    data = request.json
    category = data.get('category')
    date = data.get('date')
    
    # Validate input parameters
    if not category:
        return jsonify({
            'status': 'error',
            'message': 'Category parameter is required'
        }), 400
    
    if category not in VALID_CATEGORIES:
        return jsonify({
            'status': 'error',
            'message': f"Invalid category. Valid categories are: {', '.join(VALID_CATEGORIES)}"
        }), 400
    
    if not date:
        return jsonify({
            'status': 'error',
            'message': 'Date parameter is required'
        }), 400
    
    # Validate date format
    if not re.match(r'^\d{4}-\d{2}-\d{2}$', date):
        return jsonify({
            'status': 'error',
            'message': 'Date should be in YYYY-MM-DD format'
        }), 400
    
    try:
        # Execute the prediction script
        result = subprocess.run(
            ['python', 'main.py', '--predict', '--category', category, '--date', date],
            capture_output=True, text=True, check=True
        )
        
        # Format date for filename (remove hyphens if your script does)
        formatted_date = date.replace('-', '')
        
        # Create a fixed path for the zip file in a directory you know you have write access to
        output_dir = os.path.join(BASE_DIR, 'results')
        os.makedirs(output_dir, exist_ok=True)
        zip_path = os.path.join(output_dir, f"{category}_{formatted_date}_predictions.zip")
        
        # Remove the zip file if it already exists
        if os.path.exists(zip_path):
            try:
                os.remove(zip_path)
            except PermissionError:
                # If we can't remove it, generate a unique name
                import uuid
                zip_path = os.path.join(output_dir, f"{category}_{formatted_date}_{uuid.uuid4().hex[:8]}_predictions.zip")
        
        # Create the zip file
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            # Add CSV file
            csv_path = os.path.join(BASE_DIR, 'results', f"{category}_{formatted_date}_predictions.csv")
            if os.path.exists(csv_path):
                zipf.write(csv_path, os.path.basename(csv_path))
            else:
                return jsonify({
                    'status': 'error',
                    'message': f"CSV file for {category} and date {date} not found"
                }), 404
            
            # Add PNG files
            png_paths = [
                os.path.join(BASE_DIR, 'results', f"{category}_predictions.png"),
                os.path.join(BASE_DIR, 'results', f"{category}_total_amount.png")
            ]
            
            missing_files = []
            for png_path in png_paths:
                if os.path.exists(png_path):
                    zipf.write(png_path, os.path.basename(png_path))
                else:
                    missing_files.append(os.path.basename(png_path))
        
        # Return the zip file
        try:
            response = send_file(
                zip_path,
                mimetype='application/zip',
                as_attachment=True,
                download_name=f"{category}_{date}_predictions.zip"
            )
            
            # Set a flag to delete the file after the response is sent
            response.headers['X-Delete-After-Send'] = 'true'
            response.direct_passthrough = False
            
            return response
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': f"Error sending file: {str(e)}"
            }), 500
            
    except subprocess.CalledProcessError as e:
        return jsonify({
            'status': 'error',
            'message': 'Prediction failed',
            'details': e.stderr
        }), 500

@app.route('/get_categories', methods=['GET'])
def get_categories():
    """API endpoint to return available biller categories"""
    return jsonify({
        'status': 'success',
        'categories': VALID_CATEGORIES
    })